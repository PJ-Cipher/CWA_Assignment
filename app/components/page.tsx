'use client';

import { useState } from 'react';

interface Tab {
  id: string;
  title: string;
  content: string;
}

export default function Components() {
  const [componentType, setComponentType] = useState('Tabs');
  const [componentTitle, setComponentTitle] = useState('My Component');
  const [tabs, setTabs] = useState<Tab[]>([
    {
      id: 'tab1',
      title: 'Home',
      content: 'Welcome to the home page. This is where you can find general information about our website.'
    },
    {
      id: 'tab2',
      title: 'About',
      content: 'Learn more about us, our mission, and what we do. We are committed to providing excellent service.'
    },
    {
      id: 'tab3',
      title: 'Contact',
      content: 'Get in touch with us through email, phone, or visit our office. We\'d love to hear from you!'
    }
  ]);
  const [primaryColor, setPrimaryColor] = useState('#3B82F6');
  const [secondaryColor, setSecondaryColor] = useState('#64748B');
  const [backgroundColor, setBackgroundColor] = useState('#FFFFFF');

  const addTab = () => {
    const newTab: Tab = {
      id: `tab${tabs.length + 1}`,
      title: `Tab ${tabs.length + 1}`,
      content: 'Enter your content here...'
    };
    setTabs([...tabs, newTab]);
  };

  const removeTab = (id: string) => {
    if (tabs.length > 1) {
      setTabs(tabs.filter(tab => tab.id !== id));
    }
  };

  const updateTab = (id: string, field: 'title' | 'content', value: string) => {
    setTabs(tabs.map(tab => 
      tab.id === id ? { ...tab, [field]: value } : tab
    ));
  };

  const generateCode = () => {
    const htmlCode = generateHTML();
    const cssCode = generateCSS();
    
    // Create a downloadable file
    const content = `<!-- HTML5 Code Generated by LTU MOODLE LMS Components -->
${htmlCode}

<style>
${cssCode}
</style>

<script>
${generateJavaScript()}
</script>`;
    
    const blob = new Blob([content], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${componentTitle.toLowerCase().replace(/\s+/g, '-')}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateHTML = () => {
    return `<div class="tabs-container">
  <h2 class="component-title">${componentTitle}</h2>
  <div class="tabs">
    <div class="tab-buttons">
      ${tabs.map((tab, index) => 
        `<button class="tab-btn ${index === 0 ? 'active' : ''}" data-tab="${tab.id}">${tab.title}</button>`
      ).join('')}
    </div>
    <div class="tab-content">
      ${tabs.map((tab, index) => 
        `<div class="tab-pane ${index === 0 ? 'active' : ''}" id="${tab.id}">
          <div class="tab-content-inner">${tab.content}</div>
        </div>`
      ).join('')}
    </div>
  </div>
</div>`;
  };

  const generateCSS = () => {
    return `.tabs-container {
  max-width: 800px;
  margin: 0 auto;
  font-family: Arial, sans-serif;
}

.component-title {
  text-align: center;
  color: ${primaryColor};
  margin-bottom: 20px;
  font-size: 24px;
}

.tabs {
  border: 1px solid ${secondaryColor};
  border-radius: 8px;
  overflow: hidden;
}

.tab-buttons {
  display: flex;
  background-color: ${backgroundColor};
  border-bottom: 1px solid ${secondaryColor};
}

.tab-btn {
  flex: 1;
  padding: 12px 20px;
  border: none;
  background: none;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  color: ${secondaryColor};
  transition: all 0.3s ease;
  border-right: 1px solid ${secondaryColor};
}

.tab-btn:last-child {
  border-right: none;
}

.tab-btn:hover {
  background-color: ${primaryColor}20;
  color: ${primaryColor};
}

.tab-btn.active {
  background-color: ${primaryColor};
  color: white;
}

.tab-content {
  background-color: ${backgroundColor};
  min-height: 200px;
}

.tab-pane {
  display: none;
  padding: 20px;
}

.tab-pane.active {
  display: block;
}

.tab-content-inner {
  line-height: 1.6;
  color: #333;
}`;
  };

  const generateJavaScript = () => {
    return `document.addEventListener('DOMContentLoaded', function() {
  const tabButtons = document.querySelectorAll('.tab-btn');
  const tabPanes = document.querySelectorAll('.tab-pane');

  tabButtons.forEach(button => {
    button.addEventListener('click', function() {
      const targetTab = this.getAttribute('data-tab');
      
      // Remove active class from all buttons and panes
      tabButtons.forEach(btn => btn.classList.remove('active'));
      tabPanes.forEach(pane => pane.classList.remove('active'));
      
      // Add active class to clicked button and corresponding pane
      this.classList.add('active');
      document.getElementById(targetTab).classList.add('active');
    });
  });
});`;
  };

  return (
    <div className="bg-gray-900 min-h-screen">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Page Title */}
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-white">HTML5 Code Generator</h1>
          </div>

          {/* Component Configuration Section */}
          <div className="bg-gray-800 rounded-lg p-6 mb-6 border border-gray-700">
            <h2 className="text-xl font-semibold text-white mb-2">Component Configuration</h2>
            <p className="text-gray-300 text-sm mb-4">Configure your HTML5 component settings</p>
            
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-white text-sm font-medium mb-2">Component Type</label>
                <select 
                  value={componentType}
                  onChange={(e) => setComponentType(e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="Tabs">Tabs</option>
                  <option value="Accordion">Accordion</option>
                  <option value="Carousel">Carousel</option>
                  <option value="Modal">Modal</option>
                </select>
              </div>
              
              <div>
                <label className="block text-white text-sm font-medium mb-2">Component Title</label>
                <input 
                  type="text"
                  value={componentTitle}
                  onChange={(e) => setComponentTitle(e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter component title"
                />
              </div>
            </div>
          </div>

          {/* Custom Tabs Section */}
          <div className="bg-gray-800 rounded-lg p-6 mb-6 border border-gray-700">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-white">Custom Tabs</h2>
              <button
                onClick={addTab}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
                Add Tab
              </button>
            </div>
            
            <div className="space-y-4">
              {tabs.map((tab, index) => (
                <div key={tab.id} className="bg-gray-700 rounded-lg p-4 border border-gray-600">
                  <div className="flex justify-between items-center mb-3">
                    <h3 className="text-white font-medium">Tab {index + 1}</h3>
                    {tabs.length > 1 && (
                      <button
                        onClick={() => removeTab(tab.id)}
                        className="text-red-400 hover:text-red-300 transition-colors"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                        </svg>
                      </button>
                    )}
                  </div>
                  
                  <div className="space-y-3">
                    <div>
                      <label className="block text-gray-300 text-sm mb-1">Tab Title</label>
                      <input
                        type="text"
                        value={tab.title}
                        onChange={(e) => updateTab(tab.id, 'title', e.target.value)}
                        className="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-gray-300 text-sm mb-1">Tab Content</label>
                      <textarea
                        value={tab.content}
                        onChange={(e) => updateTab(tab.id, 'content', e.target.value)}
                        rows={3}
                        className="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500 resize-vertical"
                      />
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Color Configuration Section */}
          <div className="bg-gray-800 rounded-lg p-6 mb-6 border border-gray-700">
            <h2 className="text-xl font-semibold text-white mb-4">Color Configuration</h2>
            
            <div className="grid md:grid-cols-3 gap-4">
              <div>
                <label className="block text-white text-sm font-medium mb-2">Primary Color</label>
                <input
                  type="color"
                  value={primaryColor}
                  onChange={(e) => setPrimaryColor(e.target.value)}
                  className="w-full h-10 bg-gray-700 border border-gray-600 rounded-md cursor-pointer"
                />
              </div>
              
              <div>
                <label className="block text-white text-sm font-medium mb-2">Secondary Color</label>
                <input
                  type="color"
                  value={secondaryColor}
                  onChange={(e) => setSecondaryColor(e.target.value)}
                  className="w-full h-10 bg-gray-700 border border-gray-600 rounded-md cursor-pointer"
                />
              </div>
              
              <div>
                <label className="block text-white text-sm font-medium mb-2">Background Color</label>
                <input
                  type="color"
                  value={backgroundColor}
                  onChange={(e) => setBackgroundColor(e.target.value)}
                  className="w-full h-10 bg-gray-700 border border-gray-600 rounded-md cursor-pointer"
                />
              </div>
            </div>
          </div>

          {/* Generate Button */}
          <div className="text-center">
            <button
              onClick={generateCode}
              className="bg-gray-700 text-white px-8 py-3 rounded-lg hover:bg-gray-600 transition-colors font-medium text-lg"
            >
              Generate HTML5 Code
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
